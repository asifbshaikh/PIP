using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using System.Collections.Generic;
using System.Threading.Tasks;
using USTGlobal.PIP.Api.Middleware;
using USTGlobal.PIP.ApplicationCore.DTOs;
using USTGlobal.PIP.ApplicationCore.Interfaces;

namespace USTGlobal.PIP.Api.Controllers
{
    /// <summary>
    /// AccountController
    /// </summary>
    [AuthorizeRolePermission(AuthorizeRoles = "Admin,Finance Approver,Editor,Reviewer,Readonly")]
    [Route("api/account")]
    public class AccountController : BaseController
    {
        private readonly IUserService userService;
        private readonly IUploadExcelService uploadExcelService;
        private readonly IAdminService adminService;
        private readonly IAdminPipCheckinService adminPipCheckinService;
        private readonly IProjectHeaderService projectHeaderService;
        private readonly IAccountAuthService accountAuthService;

        /// <summary>
        /// IConfiguration
        /// </summary>
        public IConfiguration Configuration { get; }

        /// <summary>
        /// AccountController constructor
        /// </summary>
        /// <param name="userService"></param>
        /// <param name="configuration"></param>
        /// <param name="uploadExcelService"></param>
        /// <param name="adminService"></param>
        /// <param name="adminPipCheckinService"></param>
        /// <param name="projectHeaderService"></param>
        /// <param name="accountAuthService"></param>
        public AccountController(IUserService userService, IConfiguration configuration, IUploadExcelService uploadExcelService
            , IAdminService adminService, IAdminPipCheckinService adminPipCheckinService, IProjectHeaderService projectHeaderService
            , IAccountAuthService accountAuthService)
        {
            this.userService = userService;
            Configuration = configuration;
            this.uploadExcelService = uploadExcelService;
            this.accountAuthService = accountAuthService;
            this.adminService = adminService;
            this.adminPipCheckinService = adminPipCheckinService;
            this.projectHeaderService = projectHeaderService;
        }

        /// <summary>
        /// Get Admin and Finance Approver Users based on AccountId
        /// </summary>
        /// <param name="accountId"></param>
        /// <returns></returns>
        [HttpGet, Route("{accountId}/admins")]
        public async Task<ActionResult<List<AdminDTO>>> GetAdmins(int accountId)
        {
            string userName = GetUserName();
            List<RoleAndAccountDTO> roleAndAccounts = await accountAuthService.GetUserAccountLevelRoles(userName);

            if (roleAndAccounts.Find(x => (x.AccountId == accountId && x.RoleId == 2) || x.RoleId == 1) != null)
            {
                return await this.adminService.GetAdmins(accountId);
            }
            else
            {
                return Unauthorized();
            }
        }

        /// <summary>
        /// Get Editor, Reviewer and ReadOnly Users based on AccountId
        /// </summary>
        /// <param name="accountId"></param>
        /// <returns></returns>
        [AuthorizeRolePermission(AuthorizeRoles = "Admin,Finance Approver")]
        [HttpGet, Route("{accountId}/usersAndRoles")]
        public async Task<ActionResult<List<RoleManagementDTO>>> GetUsersAndRoles(int accountId)
        {
            string userName = GetUserName();
            List<RoleAndAccountDTO> roleAndAccounts = await accountAuthService.GetUserAccountLevelRoles(userName);

            if (roleAndAccounts.Find(x => (x.AccountId == accountId && x.RoleId == 2) || (x.RoleId == 1)) != null)
            {
                return await this.adminService.getUsersAndRoles(accountId);
            }
            else
            {
                return Unauthorized();
            }
        }

        /// <summary>
        /// Get all Projects based on AccountId
        /// </summary>
        /// <param name="accountId"></param>
        /// <returns></returns>
        [AuthorizeRolePermission(AuthorizeRoles = "Admin")]
        [HttpGet, Route("{accountId}/projects")]
        public async Task<IList<AccountBasedProjectDTO>> GetAccountBasedProjects(int accountId)
        {
            return await this.adminPipCheckinService.GetAccountBasedProjects(accountId);
        }

        /// <summary>
        /// Get User Roles for all Accounts
        /// </summary>
        /// <returns></returns>
        [HttpGet, Route("userRoles")]
        public async Task<RoleAndAccountMainDTO> GetUserRoleForAllAccounts()
        {
            string userName = GetUserName();
            return await this.projectHeaderService.GetUserRoleForAllAccounts(userName);
        }

        /// <summary>
        /// Get Autogenerated ProjectId based on AccountId and AccountCode
        /// </summary>
        /// <param name="accountId"></param>
        /// <param name="accountCode"></param>
        /// <returns></returns>
        [HttpGet, Route("{accountId}/accountCode/{accountCode}/autoGeneratedProjectId")]
        public async Task<ActionResult<string>> GetAutoGeneratedProjectId(int accountId, string accountCode)
        {
            string userName = GetUserName();
            bool authStatus = await accountAuthService.GetAccountLevelEditorCheck(userName, accountId);

            if (authStatus)
            {
                return await this.projectHeaderService.GetAutoGeneratedProjectId(accountId, accountCode);
            }
            else
            {
                return Unauthorized();
            }
        }


        /// <summary>
        /// Get Projects with status as Not Submitted based on AccountId
        /// </summary>
        /// <param name="accountId"></param>
        /// <returns></returns>
        [HttpGet, Route("{accountId}/projects/notSubmitted")]
        public async Task<ActionResult<List<ProjectDTO>>> GetProjectsByAccountId(int accountId)
        {
            string userName = GetUserName();
            bool authStatus = await accountAuthService.GetAccountLevelEditorCheck(userName, accountId);

            if (authStatus)
            {
                return await this.projectHeaderService.GetProjectsByAccountId(accountId);
            }
            else
            {
                return Unauthorized();
            }
        }
    }
}
