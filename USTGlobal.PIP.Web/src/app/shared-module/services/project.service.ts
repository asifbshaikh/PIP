import { IProjectMain } from './../domain/IProjectMain';
import { IButtonStatus } from './../domain/IButtonStatus';
import { IRoleAndAccountMain } from './../domain/IRoleAndAccountMain';
import { Observable } from 'rxjs/Observable';
import { IRoleAndAccount } from './../domain/IRoleAndAccount';
import { IPipSheetWFStatusAndAccountSpecificRole } from './../domain/IPipSheetWFStatusAndAccountSpecificRole';
import { ICurrency } from './../domain/ICurrency';
import { IProjectCurrencyHeader } from '../domain/IProjectCurrencyHeader';
import { Injectable } from '@angular/core';
import { IProject } from '@shared/domain/project';
import { IContractingEntity } from '@shared/domain/contractingentity';
import { HttpClient, HttpParams } from '@angular/common/http';
import { IServicePortfolio } from '@shared/domain/serviceportfolio';
import { IServiceLine } from '@shared/domain/serviceline';
import { IDeliveryType } from '@shared/domain/deliverytype';
import { IBillingType } from '@shared/domain/billingtype';
import { IProjectHeader } from '../domain/projectheader';
import { Constants } from '@shared';
import { IHeader1 } from '@shared/domain/IHeader1';
import { IPipVersion } from '@shared/domain/IPipVersion';
import { IHeaderInfo } from '@shared/domain/IHeaderInfo';
import { IPipCheckIn } from '@shared/domain/IPipCheckIn';
import { IPipOverride } from '@shared/domain/IPipOverride';
import { param } from 'jquery';

@Injectable({
  providedIn: 'root'
})
export class ProjectService {

  constructor(private httpClient: HttpClient) {
  }

  getProjects(): Observable<IProjectMain> {
    return this.httpClient.get<IProjectMain>(Constants.webApis.getProjectsList);
  }

  getContractingEntities(): Observable<IContractingEntity[]> {
    return this.httpClient.get<IContractingEntity[]>(Constants.webApis.getAllContractingEntities);
  }

  getServicePortfolios(): Observable<IServicePortfolio[]> {
    return this.httpClient.get<IServicePortfolio[]>(Constants.webApis.getAllServicePortfolios);
  }

  getServiceLines(): Observable<IServiceLine[]> {
    return this.httpClient.get<IServiceLine[]>(Constants.webApis.getAllServiceLines);
  }

  getDeliveryTypes(): Observable<IDeliveryType[]> {
    return this.httpClient.get<IDeliveryType[]>(Constants.webApis.getAllProjectDeliveryData);
  }

  getBillingTypes(): Observable<IBillingType[]> {
    return this.httpClient.get<IBillingType[]>(Constants.webApis.getAllProjectBillingData);
  }

  getBillingTypeBasedOnDeliveryID(deliveryID: any) {
    return this.httpClient.get<IBillingType[]>(Constants.webApis.getAllProjectBillingByDelivery.replace('{projectDeliveryId}', deliveryID)
    ).toPromise();
  }

  saveProjectData(project: IProjectHeader): Observable<IProjectHeader> {
    return this.httpClient.post<IProjectHeader>(Constants.webApis.saveProjectHeaderData, JSON.stringify(project));
  }

  getProjectHeaderData(projectId: string, pipSheetId: string): Observable<IProjectCurrencyHeader> {
    return this.httpClient.get<IProjectCurrencyHeader>(Constants.webApis.getProjectHeaderData.replace('{projectId}', projectId)
      .replace('{pipSheetId}', pipSheetId));
  }

  getHeader1Data(projectId: any, pipSheetId: any): Observable<IHeaderInfo> {
    return this.httpClient.get<IHeaderInfo>(Constants.webApis.getHeader1Data.replace('{projectId}', projectId)
      .replace('{pipSheetId}', pipSheetId));
  }

  getCurrencyConversionDetailsByCountryId(countryId: any): Observable<ICurrency> {
    return this.httpClient.get<ICurrency>(Constants.webApis.getCurrencyConversionDetailsByCountryId.replace('{countryId}', countryId));
  }

  updatePIPSheetCheckIn(pipCheckIn: IPipCheckIn): Observable<number> {
    return this.httpClient.put<number>(Constants.webApis.updatePIPSheetCheckIn, pipCheckIn);
  }

  getWorkflowStatusAccountRole(pipSheetId: any, accountId: any):
    Observable<IPipSheetWFStatusAndAccountSpecificRole> {
      const projectId = 0;
      return this.httpClient.get<IPipSheetWFStatusAndAccountSpecificRole>(Constants.webApis.getWorkflowStatusAccountRole
        .replace('{pipSheetId}', pipSheetId).replace('{accountId}', accountId).replace('{projectId}', projectId.toString()));
  }

  getPIPCheckInCheckOutStatus(pipSheetId: any): Observable<IPipCheckIn> {
    return this.httpClient.get<IPipCheckIn>(Constants.webApis.getPIPCheckInCheckOutStatus.replace('{pipSheetId}', pipSheetId));
  }

  createNewPipVersion(projectId: number, pipsheetId: number): Observable<number> {
    const data = {
      'projectId': projectId,
      'pipsheetId': pipsheetId
    };
    return this.httpClient.post<number>(Constants.webApis.createNewPipSheetVersion, data);
  }

  getUserRoleForAllAccounts(): Observable<IRoleAndAccountMain> {
    return this.httpClient.get<IRoleAndAccountMain>(Constants.webApis.getUserRoleForAllAccounts);
  }
  getAutoGeneratedProjectId(accountId: any, accountCode: any): Observable<any> {
    return this.httpClient.get<any>(Constants.webApis.getAutoGeneratedProjectId.replace('{accountId}', accountId)
    .replace('{accountCode}', accountCode));
  }
  getPipOverride(pipSheetId: any) {
    return this.httpClient.get<IPipOverride>(Constants.webApis.getPipOverrides.replace('{pipSheetId}', pipSheetId));
  }
}
